{"version":3,"sources":["components/shared/SectionName.tsx","components/ContactPage/FormComponents.tsx","components/ContactPage/SubmitForm.tsx","components/ContactPage/Message.tsx","components/ContactPage/Email.tsx","components/ContactPage/Name.tsx","helpers/postMessage.ts","components/ContactPage/index.tsx"],"names":["SectionName","styled","h1","theme","padding","medium","Form","form","Input","input","colors","secondary","Label","label","Column","section","Row","Small","span","Textarea","textarea","TextareaLabel","TextareaRow","Submit","Button","SubmitForm","content","useContext","GlobalContext","type","contact","submit","Message","errors","register","htmlFor","message","name","rows","cols","wrap","ref","required","Email","email","placeholder","pattern","EMAIL_REGEX","emailPattern","Name","url","data","successFn","failureFn","a","fetch","method","headers","body","JSON","stringify","response","console","log","ContactPage","isMobile","useForm","handleSubmit","reset","onSubmit","postMessage","alert","success","failure","PageWrapper","sectionName"],"mappings":"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","file":"static/js/5.d81977a8.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nconst SectionName = styled.h1`\r\n    text-align: center;\r\n    padding: ${({ theme }) => theme.padding.medium};\r\n`\r\nexport default SectionName\r\n","import styled from 'styled-components'\r\nimport { Button } from '../shared/Button'\r\n\r\nexport const Form = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    @media only screen and (min-width: 900px) {\r\n        margin: 0 auto;\r\n        width: 90%;\r\n        flex-direction: row;\r\n        justify-content: space-evenly;\r\n        align-items: start;\r\n    }\r\n`\r\nexport const Input = styled.input`\r\n    margin-top: 1em;\r\n    font-size: 1em;\r\n    width: 100%;\r\n    height: 3em;\r\n    border: 1px solid ${({ theme }) => theme.colors.secondary};\r\n    padding-left: 0.3em;\r\n    box-shadow: none;\r\n    @media only screen and (min-width: 900px) {\r\n        width: 350px;\r\n    }\r\n    @media only screen and (min-width: 1024px) {\r\n        width: 400px;\r\n    }\r\n`\r\n\r\nexport const Label = styled.label`\r\n    position: absolute;\r\n    left: 0;\r\n    top: -5px;\r\n    font-weight: bold;\r\n    @media only screen and (min-width: 900px) {\r\n        font-size: 125%;\r\n        top: -13px;\r\n    }\r\n`\r\nexport const Column = styled.section``\r\n\r\nexport const Row = styled.section`\r\n    position: relative;\r\n    margin-top: 1em;\r\n    width: 50%;\r\n    min-width: 300px;\r\n    @media only screen and (min-width: 900px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n        &:nth-of-type(2) {\r\n            margin-top: 1.5em;\r\n            width: auto;\r\n        }\r\n        &:last-of-type {\r\n            display: block;\r\n        }\r\n    }\r\n`\r\n\r\nexport const Small = styled.span`\r\n    color: rgb(207, 0, 0);\r\n    font-weight: bold;\r\n    font-size: 0.8em;\r\n    @media only screen and (min-width: 900px) {\r\n        margin-top: 0.3em;\r\n    }\r\n`\r\nexport const Textarea = styled.textarea`\r\n    resize: none;\r\n    font-size: 1em;\r\n    width: 100%;\r\n    border: 1px solid ${({ theme }) => theme.colors.secondary};\r\n    padding: 0.3em;\r\n    box-shadow: none;\r\n    @media only screen and (min-width: 900px) {\r\n        width: 350px;\r\n    }\r\n    @media only screen and (min-width: 1024px) {\r\n        width: 400px;\r\n    }\r\n`\r\nexport const TextareaLabel = styled(Label)`\r\n    top: -22px;\r\n    @media only screen and (min-width: 900px) {\r\n        top: -30px;\r\n    }\r\n`\r\nexport const TextareaRow = styled(Row)`\r\n    margin-top: 2em;\r\n`\r\n\r\nexport const Submit = styled(Button)`\r\n    float: right;\r\n    cursor: pointer;\r\n    font-size: 1em;\r\n    @media only screen and (min-width: 900px) {\r\n        font-size: 125%;\r\n    }\r\n`\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context'\r\nimport { Row, Submit } from './FormComponents'\r\n\r\nconst SubmitForm = () => {\r\n    const { content } = useContext(GlobalContext)\r\n    return (\r\n        <Row>\r\n            <Submit type='submit'>{content.contact.submit}</Submit>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default SubmitForm\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context'\r\nimport {\r\n    Small,\r\n    TextareaLabel,\r\n    TextareaRow,\r\n    Textarea,\r\n} from './FormComponents'\r\nimport { InputProps } from '../../types'\r\n\r\nconst Message = ({ errors, register }: InputProps) => {\r\n    const { content } = useContext(GlobalContext)\r\n    return (\r\n        <TextareaRow>\r\n            <TextareaLabel htmlFor='message'>\r\n                {content.contact.message}\r\n            </TextareaLabel>\r\n            <Textarea\r\n                name='message'\r\n                rows={10}\r\n                cols={10}\r\n                wrap='hard'\r\n                ref={register({ required: true })}\r\n            />\r\n            {errors.message && (\r\n                <Small>{content.contact.errors.message}</Small>\r\n            )}\r\n        </TextareaRow>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context'\r\nimport { Input, Label, Row, Small } from './FormComponents'\r\nimport { EMAIL_REGEX } from '../../helpers/utils'\r\nimport { InputProps } from '../../types'\r\n\r\nconst Email = ({ errors, register }: InputProps) => {\r\n    const { content } = useContext(GlobalContext)\r\n    return (\r\n        <Row>\r\n            <Label htmlFor='email'>{content.contact.email}</Label>\r\n            <Input\r\n                name='email'\r\n                placeholder='example@address.com'\r\n                ref={register({\r\n                    required: true,\r\n                    pattern: EMAIL_REGEX,\r\n                })}\r\n            />\r\n            {errors.email && errors.email.type === 'required' && (\r\n                <Small>{content.contact.errors.email}</Small>\r\n            )}\r\n            {errors.email && errors.email.type === 'pattern' && (\r\n                <Small>{content.contact.errors.emailPattern}</Small>\r\n            )}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Email\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context'\r\nimport { Input, Label, Row, Small } from './FormComponents'\r\nimport { InputProps } from '../../types'\r\n\r\nconst Name = ({ errors, register }: InputProps) => {\r\n    const { content } = useContext(GlobalContext)\r\n    return (\r\n        <Row>\r\n            <Label htmlFor='name'>{content.contact.name}</Label>\r\n            <Input\r\n                type='text'\r\n                name='name'\r\n                ref={register({\r\n                    required: true,\r\n                })}\r\n            />\r\n            {errors.name && errors.name.type === 'required' && (\r\n                <Small>{content.contact.errors.name}</Small>\r\n            )}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Name\r\n","export default async function postMessage(\r\n    url: string,\r\n    data: any,\r\n    successFn: Function,\r\n    failureFn: Function\r\n) {\r\n    try {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        })\r\n        console.log(response)\r\n        // response.json())\r\n        successFn()\r\n    } catch (error) {\r\n        failureFn()\r\n    }\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../../context'\r\nimport SectionName from '../shared/SectionName'\r\nimport { useForm } from 'react-hook-form'\r\nimport SubmitForm from './SubmitForm'\r\nimport Message from './Message'\r\nimport Email from './Email'\r\nimport Name from './Name'\r\nimport { Form, Column } from './FormComponents'\r\nimport postMessage from '../../helpers/postMessage'\r\nimport PageWrapper from '../shared/PageWrapper'\r\n\r\nconst ContactPage = () => {\r\n    const { content, isMobile } = useContext(GlobalContext)\r\n    const { register, handleSubmit, errors, reset } = useForm()\r\n\r\n    const onSubmit = handleSubmit(data => {\r\n        postMessage(\r\n            'https://formspree.io/xvorpadg',\r\n            data,\r\n            () => alert(content.contact.success),\r\n            () => alert(content.contact.failure)\r\n        )\r\n        reset()\r\n    })\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <SectionName>{content.contact.sectionName}</SectionName>\r\n            <Form onSubmit={onSubmit}>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Name errors={errors} register={register} />\r\n                        <Email errors={errors} register={register} />\r\n                        <Message\r\n                            errors={errors}\r\n                            register={register}\r\n                        />\r\n                        <SubmitForm />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Column>\r\n                            <Name\r\n                                errors={errors}\r\n                                register={register}\r\n                            />\r\n                            <Email\r\n                                errors={errors}\r\n                                register={register}\r\n                            />\r\n                        </Column>\r\n                        <Column>\r\n                            <Message\r\n                                errors={errors}\r\n                                register={register}\r\n                            />\r\n                            <SubmitForm />\r\n                        </Column>\r\n                    </>\r\n                )}\r\n            </Form>\r\n        </PageWrapper>\r\n    )\r\n}\r\nexport default ContactPage\r\n"],"sourceRoot":""}